---
- debug:
    msg: "Check to see if EULA variables are accepted"
  failed_when: (end_user_license_aggreement_consent_server != "Y" )or (end_user_license_aggreement_consent_cli != "YES")

- name: Add Microsoft yum repositories for SQL Server 2019 on RHEL 8
  yum_repository:
    name: packages-microsoft-com-mssql-server-2019-gdr
    description: packages-microsoft-com-mssql-server-2019-gdr
    baseurl: https://packages.microsoft.com/rhel/8/mssql-server-2019/
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    gpgcheck: true

- name: Install Microsoft SQL Server package
  yum:
    name: mssql-server
    state: present
  register: install

- name: Install Microsoft repository for SQL Server tools
  yum_repository:
    name: packages-microsoft-com-prod
    description: Microsoft packages
    baseurl: https://packages.microsoft.com/rhel/8/prod/
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc
    gpgcheck: true

- name: Install SQL Server client tools
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - mssql-tools 
    - unixODBC-devel
  environment:
    - ACCEPT_EULA: Y

- name: Install python and openssl
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - python2
    - compat-openssl10
  when: (ansible_facts['distribution'] == "RedHat" and ansible_facts['distribution_major_version'] == "8")

# - name: Update all packages
#   yum:
#     name: "*"
#     state: latest
#   async: 500
#   poll: 0
#   register: yum_sleep
# 
# - name: Check progress of update
#   async_status:
#     jid: "{{ yum_sleep.ansible_job_id }}"
#   register: job_result
#   until: job_result.finished
#   retries: 60
#   delay: 5

- name: Set default python
  alternatives:
    name: python
    path: /usr/bin/python2
  when: (ansible_facts['distribution'] == "RedHat" and ansible_facts['distribution_major_version'] == "8")

# - name: Check if MSSQL is already configured
#   command: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Redhat1! -Q "SELECT @@VERSION"
#   register: sqlcmd
#   ignore_errors: true

- name: Stop any existing running SQL Server service
  service:
      name: mssql-server
      state: stopped

- name: Run SQL Server setup mssql-conf 
  command: /opt/mssql/bin/mssql-conf -n setup accept-eula
  environment:
    - MSSQL_SA_PASSWORD: "{{ db_password }}"
    - MSSQL_PID: "{{ edition }}"
  when: install is changed

- name: Add mssql-tools to bash profile
  lineinfile:
    path: "{{ item }}"
    line: export PATH="$PATH:/opt/mssql-tools/bin"
  loop:
    - ~/.bash_profile
    - ~/.bashrc

- name: Create symlinks
  file:
    src: "{{ item.target }}"
    dest: "{{ item.name }}"
    state: link
  loop:
    - { target: '/usr/lib64/libssl.so.10', name: '/opt/mssql/lib/libssl.so' }
    - { target: '/usr/lib64/libcrypto.so.10', name: '/opt/mssql/lib/libcrypto.so' }

- name: Install pymssql for future playbooks against DB server
  pip:
    name: pymssql
    state: present

- name: Add firewalld settings
  firewalld:
    zone: public
    port: 1433/tcp
    permanent: true
    state: enabled
  when: enable_iptables
  notify: restart iptables
  
  
